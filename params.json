{"name":"Sky17","tagline":"nginx monitor about upstream ","body":"`nginx-ustats-module模块的研究与改进`\r\n\r\n一.安装与配置说明\r\n====\r\n\r\n* 下载该项目[nginx-ustats-module](https://github.com/wangfakang/ngx_ustats_module),此模块支持tengine-2.1.1.\r\n* 进入nginx根目录:\r\n  *      patch -p1 -i nginx-1.6.2.patch\r\n  *      ./configure --add-module=src/http/modules/ngx_ustats_module\r\n  *      make && make install\r\n  \r\n* nginx配置文件:\r\n\r\n\r\n```nginx   \r\n    location /ustats {\r\n        ustats memsize=3m; #指定监控共享内存饿大小.\r\n        ustats_refresh_interval 6000;#监控数据多长时间刷新一次\r\n        ustats_html_table_width 95;#html的宽度\r\n        ustats_html_table_height 95;#html的高度\r\n    }\r\n```      \r\n\r\n二.实现原理\r\n====\r\n  该模块主要的思想就是在nginx的upstream的处理的不同阶段来进行记录相应的`peer`的状态.值得学习的是:他使用了一个大的共享内存\r\n完美的解决多个worker数据的`聚合`,当然多进程操作同一块共享内存存在安全问题,是这样解决的:使用nginx中封装的cpu原子操作来进行\r\n计数(如:`ngx_atomic_fetch_add`).还有个技巧就是:使用一个大的共享内存,然后各自`peer`只需记住自己在共享内存中的起始地址,然后\r\n使用其偏移量进行读取就ok了.        \r\n\r\n三.监控数据说明\r\n====\r\n\r\n* Number of requests\r\n* Http 499/500/503 errors count\r\n* Tcp errors\r\n* Http read/write timeouts\r\n* Fail timeout\r\n* Max fails count\r\n* Last failed access time\r\n* Total fails count\r\n* Blacklisted backend highlighting\r\n* Down backends highlighting\r\n\r\nThe module's **web interface** provides a good visual representation of what's going on with your backends. Values in some columns of the table can be sorted within each upstream row.\r\n\r\nGathered data can also be retrieved in **JSON format**. To do so, append `?json=1` to the end of location on which the module was set to work on (see configuration instructions below).\r\n\r\n* Json Show:\r\nrequest url:    \r\n`http://127.0.0.1:8045/monitor?json=1 `   \r\n\r\n```json    \r\n{\r\n    \"bar\":\r\n    [\r\n\t\t[\"127.0.0.1:80\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, \"0000-00-00 00:00:00\", \"0000-00-00 00:00:00\", 0],\r\n\t\t[\"127.0.0.1:81\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, \"0000-00-00 00:00:00\", \"0000-00-00 00:00:00\", 0],\r\n\t\t[\"61.135.169.121:80 (www.baidu.com)\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, \"0000-00-00 00:00:00\", \"0000-00-00 00:00:00\", 0],\r\n\t\t[\"61.135.169.125:80 (www.baidu.com)\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, \"0000-00-00 00:00:00\", \"0000-00-00 00:00:00\", 0],\r\n\t\t0\r\n\t],\r\n\t\"www.baidu.com\":\r\n\t[\r\n\t\t[\"61.135.169.121:80 (www.baidu.com)\", 0, 1, 8296, 1, 60401, 0, 0, 0, 0, 0, 20, 0, 10, 1, \"2016-01-20 12:44:02\", \"2016-01-20 14:13:22\", 7003],\r\n\t\t[\"61.135.169.125:80 (www.baidu.com)\", 0, 1, 8375, 1, 360, 0, 0, 0, 0, 0, 24, 0, 10, 1, \"2016-01-20 12:46:13\", \"2016-01-20 14:13:23\", 6826],\r\n\t\t1\r\n\t]\r\n}\r\n```       \r\nupstream name:     \r\n[   \r\n    [peer_name, down, failed, requests, RPS, SPEED, 499, 5xx, 500, 503, tcp_errors, R_timeouts, w_timeouts, f_t, m_f, s_t, last_fail_t, tot_f],\r\nimplicit    \r\n]\r\n\r\n`implicit`: means different upstream (if implicit 1 means 'implicit' upstream for example `proxy_pass`). \r\n\r\n5xx:  499 < x < 600 explict 500 503\r\n* Html Show    \r\nrequest url:   \r\n`http://127.0.0.1:8045/monitor?json=1 `  \r\n\r\n![Screenshot](https://github.com/wangfakang/ngx_ustats_module/blob/master/doc/monitor.jpg)\r\n\r\n* Note    \r\n `this module not support `dynamic manage upstream` forexample 'tengine dyups module'.`\r\n\r\n\r\nCommunite  \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/fakangwang)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n","google":"nginx monitor upstream ","note":"Don't delete this file! It's used internally to help with page regeneration."}